#!/usr/bin/env node
//
// This script is a wrapper around the Haraka CLI.
// It's purpose is to allow generating Haraka config dynamically.

var fs = require("fs");
var path = require("path");
var spawn = require("child_process").spawn;
var exec = require("child_process").exec;
var crypto = require('crypto');

// Generate the "me" core configuration file
var generateHostnameConfig = function(me_path) {
  var data = "";

  exec("hostname --fqdn", function(err, stdout, stderr) {
    data += stdout;

    fs.writeFileSync(me_path, data);
  });
}

// Generate the "smtp.ini" core configuration file
var generateSMTPConfig = function(smtp_ini_path) {
  var data = "";
  var host = process.env.HOST || "[::0]";
  var port = process.env.PORT || "25";

  data += "listen=" + host + ":" + port;

  fs.writeFileSync(smtp_ini_path, data);
}

// Generate the "webhook_url" plugin configuration file
var generateQueueWebhookConfig = function(webhook_url_path) {
  var data = "";
  var webhook_url = process.env.WEBHOOK_URL || "http://localhost/incoming"

  data += webhook_url;

  fs.writeFileSync(webhook_url_path, data);
}

// Generate the "auth_flat_file" plugin configuration file
var generateAuthFlatFileConfig = function(config_file) {
  var data = "";
  var user = process.env.SMTP_USER || "mail";
  var password =
    process.env.SMTP_PASSWORD || crypto.randomBytes(16).toString('hex');

  data += "[core]\n";
  data += "methods=PLAIN,LOGIN,CRAM-MD5\n";
  data += "\n"
  data += "[users]\n";
  data += user + "=" + password + "\n";

  fs.writeFileSync(config_file, data);
}

// Generate the key and certificate to use for STARTTLS
var generateTLSConfig = function(tls_key_file, tls_cert_file) {
  var openssl_args = [
    "req", "-x509", "-nodes",
    "-days", "365",
    "-newkey", "rsa:2048",
    "-subj", "/C=/ST=/L=/O=AntMail/CN=localhost",
    "-keyout", tls_key_file,
    "-out", tls_cert_file
  ]
  spawn("openssl", openssl_args, {stdio: "ignore"});
}

// Generate every core configuration files
var generateCoreConfiguration = function(configPath) {
  generateHostnameConfig(configPath + "/me");
  generateSMTPConfig(configPath + "/smtp.ini");
};

// Generate every plugins configuration files
var generatePluginsConfiguration = function(configPath) {
  generateQueueWebhookConfig(configPath + "/webhook_url");
  generateAuthFlatFileConfig(configPath + "/auth_flat_file.ini");
  generateTLSConfig(configPath + "/tls_key.pem", configPath + "/tls_cert.pem");
};

// Generate the configuration for Haraka
var generateConfiguration = function(configPath) {
  generateCoreConfiguration(configPath);
  generatePluginsConfiguration(configPath);
};

// Start the Haraka process
var startHaraka = function(rootPath) {
  var haraka = spawn("haraka", ["--config", rootPath], {stdio: "inherit"});

  process.on("SIGINT", function() {
    haraka.kill("SIGINT");
  });

  haraka.on("exit", function(code) {
    process.exit(code);
  });
};

// Generate configuration dynamically and start Haraka
var main = function() {
  var rootPath = path.dirname(require.main.filename) + "/..";

  generateConfiguration(rootPath + "/config");
  startHaraka(rootPath);
};

main();
